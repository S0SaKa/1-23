Напишем свой аналог листа таблицы Excel. Нужно написать структуру данных Field, в которой доступ к значениям будет осуществляться по ключам. Ключом будет пара "буква" - "число", по аналогии с адресом ячейки в Excel. Возможные форматы обращения к одной и той же "ячейке" данных:
field = Field()
field[1, 'a'] = 25
field['a', 1] = 25
field['a', '1'] = 25
field['1', 'a'] = 25
field['1a'] = 25
field['a1'] = 25
field[1, 'A'] = 25
field['A', 1] = 25
field['A', '1'] = 25
field['1', 'A'] = 25
field['1A'] = 25
field['A1'] = 25
В этом списке каждая из этих строк записывает число 25 в ячейку с одним и тем же ключом. Соответственно, по любому из перечисленных ключей должно быть можно получить это число из объекта field. Также должны быть реализованы удаление элемента из структуры (через оператор del) и возможность использования оператора in, например:
(1, 'a') in field: True
"A1" in field: True
('D', '4') in field: False
Таким образом, выходит, что ключом структуры может быть либо кортеж, либо строка. При попытке получить или записать значение по ключу другого типа должно быть вызвано исключение TypeError. При некорректном значении строки или элементов кортежа нужно вызывать исключение ValueError. Корректными значениями будет считать одиночные буквы и неотрицательное целое число любой длины, т.е. правильные варианты ключей:
А1
А222543
Z89
Неправильные варианты ключей:
AA5
Q2.5
-6F
A
27
GG
Кроме вышеперчисленного, по объекту должно быть возможно итерироваться. При проходе циклом по объекту должны возвращаться значения, хранящиеся в нём. Порядок возврата значений не важен.

Если запрашивается правильный формат ячейки, но в нашем контейнере такого ключа нет, то нужно вернуть None. Например:
field = Field()
print(field["C5"] is None)
> True
Примечания
В своем решении этого задания я использовал в качестве ключей хранимого словаря frozenset, а проверку на ValueError реализовал через регулярку. Также рекомендую проверку типов и преобразование поступившего ключа в тот вид, в котором он хранится "под капотом", вынести в отдельный метод и вызывать его из всех описываемых магических методов.

import re


class Field(dict):
    def __init__(self):
        self.val = []

    def normal_key(self, key):
        pattern1 = re.compile(r'\d+[a-zA-z]$')
        pattern2 = re.compile(r'[a-zA-z]\d+$')
        self.key = key
        counter = 0
        if type(self.key) == tuple:
            self.key = list(self.key)
            for i in self.key:
                if type(i) == int and int(i) > 0:
                    self.key[counter] = str(i)
                elif type(i) == str:
                    self.key[counter] = str(i)
                else:
                    raise ValueError

                counter += 1

            self.key = ''.join(self.key).upper()
        if type(self.key) == str:
            self.key = ''.join(self.key).upper()
        else:
            raise TypeError

        if pattern1.match(self.key):
            return self.key
        elif pattern2.match(self.key):
            return self.key[::-1]
        else:
            raise ValueError

    def __getitem__(self, key):
        return super(Field, self).__getitem__(self.normal_key(key))

    def __setitem__(self, key, value):
        super(Field, self).__setitem__(self.normal_key(key), value)

    def __delitem__(self, key):
        super(Field, self).__delitem__(self.normal_key(key))

    def __missing__(self, key):
        return None

    def __contains__(self, item):
        return self[item] != self.__missing__(1)

    def __iter__(self):
        return (value for value in self.values())
